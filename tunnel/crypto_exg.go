package tunnel

import (
	"crypto/md5"
	"crypto/rand"
	"fmt"
	"math/big"
	"time"
)

var group5_p *big.Int = new(big.Int).SetBytes([]byte{
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xC9, 0x0F, 0xDA, 0xA2, 0x21, 0x68, 0xC2, 0x34,
	0xC4, 0xC6, 0x62, 0x8B, 0x80, 0xDC, 0x1C, 0xD1,
	0x29, 0x02, 0x4E, 0x08, 0x8A, 0x67, 0xCC, 0x74,
	0x02, 0x0B, 0xBE, 0xA6, 0x3B, 0x13, 0x9B, 0x22,
	0x51, 0x4A, 0x08, 0x79, 0x8E, 0x34, 0x04, 0xDD,
	0xEF, 0x95, 0x19, 0xB3, 0xCD, 0x3A, 0x43, 0x1B,
	0x30, 0x2B, 0x0A, 0x6D, 0xF2, 0x5F, 0x14, 0x37,
	0x4F, 0xE1, 0x35, 0x6D, 0x6D, 0x51, 0xC2, 0x45,
	0xE4, 0x85, 0xB5, 0x76, 0x62, 0x5E, 0x7E, 0xC6,
	0xF4, 0x4C, 0x42, 0xE9, 0xA6, 0x37, 0xED, 0x6B,
	0x0B, 0xFF, 0x5C, 0xB6, 0xF4, 0x06, 0xB7, 0xED,
	0xEE, 0x38, 0x6B, 0xFB, 0x5A, 0x89, 0x9F, 0xA5,
	0xAE, 0x9F, 0x24, 0x11, 0x7C, 0x4B, 0x1F, 0xE6,
	0x49, 0x28, 0x66, 0x51, 0xEC, 0xE4, 0x5B, 0x3D,
	0xC2, 0x00, 0x7C, 0xB8, 0xA1, 0x63, 0xBF, 0x05,
	0x98, 0xDA, 0x48, 0x36, 0x1C, 0x55, 0xD3, 0x9A,
	0x69, 0x16, 0x3F, 0xA8, 0xFD, 0x24, 0xCF, 0x5F,
	0x83, 0x65, 0x5D, 0x23, 0xDC, 0xA3, 0xAD, 0x96,
	0x1C, 0x62, 0xF3, 0x56, 0x20, 0x85, 0x52, 0xBB,
	0x9E, 0xD5, 0x29, 0x07, 0x70, 0x96, 0x96, 0x6D,
	0x67, 0x0C, 0x35, 0x4E, 0x4A, 0xBC, 0x98, 0x04,
	0xF1, 0x74, 0x6C, 0x08, 0xCA, 0x23, 0x73, 0x27,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
})

var group5_g int = 2

type CipherExchange struct {
	P         *big.Int
	G         int
	XY        *big.Int
	EF        *big.Int
	Key       *big.Int
	CryptoKey []byte // fixed size key, for cipher
	IV        []byte
}

func MakeCipherExchange(p *big.Int, g int) *CipherExchange {
	ctx := &CipherExchange{
		P: p,
		G: g,
	}

	return ctx
}

func NewCipherExchange(group int) (*CipherExchange, error) {
	if group == 5 {
		return MakeCipherExchange(group5_p, group5_g), nil
	}

	return nil, fmt.Errorf("no such group: %d", group)
}

func (ctx *CipherExchange) MakeE() (*big.Int, error) {
	return ctx.MakeEF(1)
}

func (ctx *CipherExchange) MakeF() (*big.Int, error) {
	return ctx.MakeEF(0)
}

func (ctx *CipherExchange) MakeEF(minval int64) (*big.Int, error) {
	tmp := new(big.Int).Sub(ctx.P, big.NewInt(1))
	max_xy := new(big.Int).Div(tmp, big.NewInt(2))
	min_xy := big.NewInt(minval)
	// min_xy < xy < max_xy

	for {
		if xy, err := rand.Int(rand.Reader, max_xy); err != nil {
			return nil, err
		} else if xy.Cmp(min_xy) == 1 {
			ctx.XY = xy
			break
		}
	}

	ctx.EF = new(big.Int).Exp(big.NewInt(int64(ctx.G)), ctx.XY, ctx.P)
	return ctx.EF, nil
}

func (ctx *CipherExchange) CalcKey(ef *big.Int) {
	ctx.Key = new(big.Int).Exp(ef, ctx.XY, ctx.P)
}

func (ctx *CipherExchange) MakeCryptoKeyIV(key_size, iv_size int) ([]byte, []byte) {
	ctx.CryptoKey, ctx.IV = MakeCryptoKeyIV(ctx.Key.Bytes(), key_size, iv_size)
	return ctx.CryptoKey, ctx.IV
}

func (ctx *CipherExchange) MakeSessionId() (SessionId, error) {
	p, y, f := ctx.P.Bytes(), ctx.XY.Bytes(), ctx.EF.Bytes()
	buf := make([]byte, 25+len(p)+len(y)+len(f))

	now := time.Now()
	if tbin, err := now.MarshalBinary(); err != nil {
		return "", err
	} else {
		copy(buf[:12], tbin[1:13])
	}

	if _, err := rand.Read(buf[12:24]); err != nil {
		return "", err
	}
	cur := 24
	cur += copy(buf[cur:], p)
	cur += copy(buf[cur:], y)
	cur += copy(buf[cur:], f)
	buf[cur] = byte(ctx.G)

	session_bin := md5.Sum(buf)
	return SessionIdFromBytes(session_bin[:]), nil
}
